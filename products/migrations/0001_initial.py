# Generated by Django 5.1.3 on 2024-12-05 18:05

import django.core.validators
import django.db.models.deletion
import mptt.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Required, unique, max 255 characters', max_length=255, unique=True, verbose_name='Brand Name')),
                ('slug', models.SlugField(help_text='Unique URL identifier for the brand.', max_length=255, unique=True, verbose_name='Brand Slug')),
                ('description', models.TextField(blank=True, help_text='Optional', null=True, verbose_name='Brand Description')),
                ('logo', models.ImageField(blank=True, help_text='Optional', null=True, upload_to='brand_logos/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'jpeg'])], verbose_name='Brand Logo')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Format: Y-m-d H:M:S', verbose_name='Date Brand Created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Format: Y-m-d H:M:S', verbose_name='Date Brand Updated')),
            ],
            options={
                'verbose_name': 'Brand',
                'verbose_name_plural': 'Brands',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProductAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Required, unique, max 255 characters', max_length=255, unique=True, verbose_name='Product Attribute Name')),
                ('description', models.TextField(blank=True, help_text='Optional', null=True, verbose_name='Product Attribute Description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Product Attribute',
                'verbose_name_plural': 'Product Attributes',
            },
        ),
        migrations.CreateModel(
            name='ProductType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Required, unique, max 255 characters', max_length=255, unique=True, verbose_name='Type of Product')),
                ('slug', models.SlugField(help_text='Unique URL identifier for product type.', max_length=255, unique=True, verbose_name='Product Type Slug')),
            ],
            options={
                'verbose_name': 'Product Type',
                'verbose_name_plural': 'Product Types',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Required, max 100 characters', max_length=100, unique=True, verbose_name='Category Name')),
                ('slug', models.SlugField(help_text='Required, letters, numbers, underscore, or hyphens', max_length=150, unique=True, verbose_name='Category Safe URL')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this category is active.', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Format: Y-m-d H:M:S', verbose_name='Date Category Created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Format: Y-m-d H:M:S', verbose_name='Date Category Updated')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, help_text='Not required', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='products.category', verbose_name='Parent of Category')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('web_id', models.CharField(help_text='Required, unique', max_length=50, unique=True, verbose_name='Product Website ID')),
                ('slug', models.SlugField(help_text='Required, letters, numbers, underscores, or hyphens', max_length=255, verbose_name='Product Safe URL')),
                ('name', models.CharField(help_text='Required, max 255 characters', max_length=255, verbose_name='Product Name')),
                ('description', models.TextField(help_text='Required', verbose_name='Product Description')),
                ('is_active', models.BooleanField(default=True, help_text='True = Product Visible', verbose_name='Product Visibility')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Format: Y-m-d H:M:S', verbose_name='Date Product Created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Format: Y-m-d H:M:S', verbose_name='Date Product Last Updated')),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='products', to='products.brand', verbose_name='Brand')),
                ('category', models.ForeignKey(help_text='Required', on_delete=django.db.models.deletion.CASCADE, related_name='products', to='products.category', verbose_name='Product Category')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(default='images/default.png', help_text="Required, default: 'default.png'", upload_to='images/', verbose_name='Product Image')),
                ('is_feature', models.BooleanField(default=False, help_text='Default: False, True = Default Image', verbose_name='Product Default Image')),
                ('ordering', models.PositiveIntegerField(default=0, help_text='Define the order of images', verbose_name='Image Ordering')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Format: Y-m-d H:M:S', verbose_name='Date Image Created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Format: Y-m-d H:M:S', verbose_name='Date Image Updated')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media', to='products.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='ProductAttributeValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute_value', models.CharField(help_text='Required, max 255 characters', max_length=255, verbose_name='Attribute Value')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product_attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='products.productattribute')),
            ],
            options={
                'verbose_name': 'Product Attribute Value',
                'verbose_name_plural': 'Product Attribute Values',
            },
        ),
        migrations.CreateModel(
            name='ProductReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='Optional, max 255 characters', max_length=255, null=True, verbose_name='Review Title')),
                ('review', models.TextField(help_text='Required. The content of the review.', verbose_name='Review Content')),
                ('rating', models.IntegerField(help_text='Required. An integer between 1 and 5.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Rating')),
                ('date', models.DateTimeField(auto_now_add=True, help_text='The date and time when the review was created.', verbose_name='Date Created')),
                ('show_name', models.BooleanField(default=True, help_text="If checked, the user's name will be displayed.", verbose_name='Show Name')),
                ('is_approved', models.BooleanField(default=False, help_text='Designates whether the review is approved by an admin.', verbose_name='Is Approved')),
                ('product', models.ForeignKey(help_text='The product that this review is for.', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='products.product', verbose_name='Product')),
                ('user', models.ForeignKey(help_text='The user who wrote the review.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Product Review',
                'verbose_name_plural': 'Product Reviews',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='ProductInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku', models.CharField(help_text='Required, unique, max 20 characters', max_length=20, unique=True, verbose_name='Stock Keeping Unit (SKU)')),
                ('upc', models.CharField(help_text='Required, unique, max 12 characters', max_length=12, unique=True, verbose_name='Universal Product Code (UPC)')),
                ('stock', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_active', models.BooleanField(default=True, help_text='True = Product Visible', verbose_name='Product Visibility')),
                ('retail_price', models.DecimalField(decimal_places=2, help_text='Maximum price 99,999,999.99', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Recommended Retail Price')),
                ('store_price', models.DecimalField(decimal_places=2, help_text='Maximum price 99,999,999.99', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Regular Store Price')),
                ('sale_price', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum price 99,999,999.99', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Sale Price')),
                ('weight', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Product Weight')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Format: Y-m-d H:M:S', verbose_name='Date Sub-Product Created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Format: Y-m-d H:M:S', verbose_name='Date Sub-Product Updated')),
                ('attribute_values', models.ManyToManyField(blank=True, related_name='product_inventories', to='products.productattributevalue')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_inventory', to='products.product')),
                ('product_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='product_inventories', to='products.producttype')),
            ],
            options={
                'verbose_name': 'Product Inventory',
                'verbose_name_plural': 'Product Inventories',
            },
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the product was added to the wishlist.', verbose_name='Date Added')),
                ('product', models.ForeignKey(help_text='The product added to the wishlist.', on_delete=django.db.models.deletion.CASCADE, to='products.product', verbose_name='Product')),
                ('user', models.ForeignKey(help_text='The user who added the product to the wishlist.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Wishlist Item',
                'verbose_name_plural': 'Wishlist Items',
            },
        ),
        migrations.AddField(
            model_name='product',
            name='users_wishlist',
            field=models.ManyToManyField(blank=True, related_name='wishlisted_products', through='products.Wishlist', to=settings.AUTH_USER_MODEL, verbose_name='Users Wishlist'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['name'], name='products_ca_name_693421_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['slug'], name='products_ca_slug_da4386_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='category',
            unique_together={('slug', 'parent')},
        ),
        migrations.AlterUniqueTogether(
            name='productattributevalue',
            unique_together={('product_attribute', 'attribute_value')},
        ),
        migrations.AddIndex(
            model_name='productreview',
            index=models.Index(fields=['product'], name='products_pr_product_385307_idx'),
        ),
        migrations.AddIndex(
            model_name='productreview',
            index=models.Index(fields=['user'], name='products_pr_user_id_c2c9ad_idx'),
        ),
        migrations.AddIndex(
            model_name='productreview',
            index=models.Index(fields=['is_approved'], name='products_pr_is_appr_790eda_idx'),
        ),
        migrations.AddIndex(
            model_name='productinventory',
            index=models.Index(fields=['sku'], name='products_pr_sku_2462c7_idx'),
        ),
        migrations.AddIndex(
            model_name='productinventory',
            index=models.Index(fields=['upc'], name='products_pr_upc_888a83_idx'),
        ),
        migrations.AddIndex(
            model_name='productinventory',
            index=models.Index(fields=['product'], name='products_pr_product_305c93_idx'),
        ),
        migrations.AddIndex(
            model_name='wishlist',
            index=models.Index(fields=['user'], name='products_wi_user_id_2f9f50_idx'),
        ),
        migrations.AddIndex(
            model_name='wishlist',
            index=models.Index(fields=['product'], name='products_wi_product_4c3cee_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='wishlist',
            unique_together={('user', 'product')},
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['id', 'slug'], name='products_pr_id_a08e3c_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['name'], name='products_pr_name_9ff0a3_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['-created_at'], name='products_pr_created_bce1a7_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['brand'], name='products_pr_brand_i_dc6890_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category'], name='products_pr_categor_9edb3d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='product',
            unique_together={('web_id', 'slug')},
        ),
    ]
