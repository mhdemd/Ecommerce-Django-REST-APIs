openapi: 3.0.3
info:
  title: My API
  version: 1.0.0
  description: This is the API documentation for my project.
paths:
  /auth/api/change-password/:
    post:
      operationId: auth_api_change_password_create
      description: |+
        # Allows a logged-in user to change their password.

        - To use this endpoint, you first need to authorize yourself from the top of the Swagger UI page.

        - For validation, we specifically used the validate method in the serializer during the RegisterView process.

      summary: Change Password
      tags:
      - Auth - Password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChangePassword'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePassword'
          description: ''
  /auth/api/forgot-password/:
    post:
      operationId: auth_api_forgot_password_create
      description: |+
        # Sends a password reset link to the user's email.

        - First, the email is checked to see if it exists in the database. If it does not, an error is raised.

        - The email format is validated using EmailField.

        - The website URL and the sender's email address are configured in the settings under SITE_URL and DEFAULT_FROM_EMAIL.

      summary: Forgot Password
      tags:
      - Auth - Password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ForgotPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ForgotPassword'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgotPassword'
          description: ''
  /auth/api/logout/:
    post:
      operationId: auth_api_logout_create
      description: |+
        # Logs out a user by blacklisting the refresh token.

        - To use this endpoint, you first need to authorize yourself from the top of the Swagger UI page.

        - By sending the refresh token, it is added to the blacklist and becomes invalid.

        - The access token remains valid in this case (although it will eventually expire automatically).

      summary: Logout
      tags:
      - Auth - Logout
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Logout'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Logout'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Logout'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logout'
          description: ''
  /auth/api/profile/:
    get:
      operationId: auth_api_profile_retrieve
      description: |+
        # Fetches the profile details of the logged-in user.

        - To use this endpoint, you first need to authorize yourself from the top of the Swagger UI page.

      summary: Get Profile
      tags:
      - Auth - Profile
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
  /auth/api/profile/update/:
    put:
      operationId: auth_api_profile_update_update
      description: Updates the profile information of the logged-in user.
      summary: Update Profile
      tags:
      - Auth - Profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateProfile'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProfile'
          description: ''
    patch:
      operationId: auth_api_profile_update_partial_update
      description: Updates the profile information of the logged-in user.
      summary: Update Profile
      tags:
      - Auth - Profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUpdateProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUpdateProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUpdateProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProfile'
          description: ''
  /auth/api/register/:
    post:
      operationId: auth_api_register_create
      description: |-
        # Registers a new user and sends a verification link.

        - The serializer includes built-in validations to prevent XSS attacks, ensuring no field is vulnerable.

        - Email and password fields are validated according to Django standards to guarantee proper formatting.

        - Rate limiting is implemented to prevent excessive requests, with customizable limits for added security.

        - The user model includes 'verification_token' and 'token_expiration' fields to secure the email verification link.

        - Once the link is used for verification, the token is cleared to maintain security.
      summary: User Registration
      tags:
      - Auth - Registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully. Please verify your email.
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Validation error details.
          description: ''
  /auth/api/reset-password/:
    post:
      operationId: auth_api_reset_password_create
      description: |+
        # Resets the user's password using the provided token and new password.

        - This is used in cases where, unlike the ChangePasswordView, the previous password is not available. Instead, the user provides their email address, and a link containing a temporary token is sent to them. The user's identity is determined based on the token.

        - The user then enters a new password, which replaces their old password in the database.

        - The token is automatically retrieved from the query parameters of the request.

        - The password validation rules from the ChangePasswordView are applied to ensure the new passwords meet the required standards.

      summary: Reset Password
      tags:
      - Auth - Password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetPassword'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPassword'
          description: ''
  /auth/api/token/:
    post:
      operationId: auth_api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - Auth - Token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /auth/api/token/refresh/:
    post:
      operationId: auth_api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - Auth - Token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /auth/api/token/verify/:
    post:
      operationId: auth_api_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - Auth - Token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /auth/api/verify-email/:
    get:
      operationId: auth_api_verify_email_retrieve
      description: |
        # Activates a user account after email verification.

        - When the user clicks on the link sent to their email, this API is called.

        - The link contains a temporary token that is valid for one hour.

        - Without the temporary token, you cannot access this API.
      summary: Verify Email
      tags:
      - Auth - Registration
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
components:
  schemas:
    ChangePassword:
      type: object
      properties:
        old_password:
          type: string
          writeOnly: true
        new_password:
          type: string
          writeOnly: true
        new_password2:
          type: string
          writeOnly: true
      required:
      - new_password
      - new_password2
      - old_password
    ForgotPassword:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    Logout:
      type: object
      properties:
        refresh:
          type: string
          description: The refresh token to be blacklisted.
      required:
      - refresh
    PatchedUpdateProfile:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    Profile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        date_joined:
          type: string
          format: date-time
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
      required:
      - id
      - username
    Register:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - password
      - password2
      - username
    ResetPassword:
      type: object
      properties:
        new_password:
          type: string
          writeOnly: true
        new_password2:
          type: string
          writeOnly: true
      required:
      - new_password
      - new_password2
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    UpdateProfile:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
- name: Auth - Registration
  description: Endpoints related to user registration and email verification.
- name: Auth - Token
  description: Endpoints related to obtaining, refreshing, and verifying JWT tokens.
- name: Auth - Logout
  description: Endpoints for user logout operations.
- name: Auth - Password
  description: Endpoints for managing user passwords, including reset and change.
- name: Auth - Profile
  description: Endpoints for fetching and updating user profile information.
